name: Setup AWS Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      destroy:
        description: 'Destroy infrastructure'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.6.0

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Create S3 bucket for Terraform state
      run: |
        aws s3api create-bucket \
          --bucket crm-terraform-state \
          --region ${{ env.AWS_REGION }} || true
        
        aws s3api put-bucket-versioning \
          --bucket crm-terraform-state \
          --versioning-configuration Status=Enabled || true

    - name: Create ECR repositories
      run: |
        repositories=("crm-api-gateway" "crm-auth" "crm-leads" "crm-email" "crm-whatsapp" "crm-landing-react" "crm-backoffice-react")
        
        for repo in "${repositories[@]}"; do
          aws ecr create-repository --repository-name $repo --region ${{ env.AWS_REGION }} || true
        done

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Workspace
      working-directory: ./terraform
      run: |
        terraform workspace select ${{ github.event.inputs.environment }} || \
        terraform workspace new ${{ github.event.inputs.environment }}

    - name: Terraform Plan
      if: github.event.inputs.destroy == 'false'
      working-directory: ./terraform
      run: |
        terraform plan \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="image_tag=latest" \
          -out=tfplan

    - name: Terraform Apply
      if: github.event.inputs.destroy == 'false'
      working-directory: ./terraform
      run: terraform apply -auto-approve tfplan

    - name: Terraform Destroy
      if: github.event.inputs.destroy == 'true'
      working-directory: ./terraform
      run: |
        terraform destroy -auto-approve \
          -var="environment=${{ github.event.inputs.environment }}" \
          -var="image_tag=latest"

    - name: Output Infrastructure Info
      if: github.event.inputs.destroy == 'false'
      working-directory: ./terraform
      run: |
        echo "## Infrastructure Deployed Successfully! ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Application URLs:" >> $GITHUB_STEP_SUMMARY
        terraform output -json environment_urls | jq -r 'to_entries[] | "- **\(.key | gsub("_"; " ") | ascii_upcase)**: \(.value)"' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Push code to trigger deployment workflow" >> $GITHUB_STEP_SUMMARY
        echo "2. Configure GitHub Secrets with infrastructure outputs" >> $GITHUB_STEP_SUMMARY
        echo "3. Set up domain and SSL certificates if needed" >> $GITHUB_STEP_SUMMARY