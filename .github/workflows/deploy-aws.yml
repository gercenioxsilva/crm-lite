name: Deploy CRM to AWS

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: crm-cluster
  ECS_SERVICE_PREFIX: crm

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set environment variables
      run: |
        echo "ENVIRONMENT=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" >> $GITHUB_ENV
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Create Terraform state bucket
      run: |
        aws s3api head-bucket --bucket crm-terraform-state-us-east-1 2>/dev/null || \
        aws s3api create-bucket --bucket crm-terraform-state-us-east-1 --region us-east-1

    - name: Create IAM roles for ECS
      run: |
        # Verificar se ecsTaskExecutionRole existe
        if ! aws iam get-role --role-name ecsTaskExecutionRole >/dev/null 2>&1; then
          echo "📝 Criando ecsTaskExecutionRole..."
          aws iam create-role \
            --role-name ecsTaskExecutionRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }'
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          echo "✅ ecsTaskExecutionRole criado"
        else
          echo "✅ ecsTaskExecutionRole já existe"
        fi
        
        # Verificar se ecsTaskRole existe
        if ! aws iam get-role --role-name ecsTaskRole >/dev/null 2>&1; then
          echo "📝 Criando ecsTaskRole..."
          aws iam create-role \
            --role-name ecsTaskRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }'
          aws iam put-role-policy \
            --role-name ecsTaskRole \
            --policy-name SESAndSQSAccess \
            --policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "ses:SendEmail",
                  "ses:SendRawEmail",
                  "sqs:SendMessage",
                  "sqs:ReceiveMessage",
                  "sqs:DeleteMessage",
                  "sqs:GetQueueAttributes"
                ],
                "Resource": "*"
              }]
            }'
          echo "✅ ecsTaskRole criado"
        else
          echo "✅ ecsTaskRole já existe"
        fi

    - name: Create ECR repositories
      run: |
        services=("api-gateway" "auth" "leads" "email" "whatsapp" "landing-react" "backoffice-react")
        
        for service in "${services[@]}"; do
          aws ecr describe-repositories --repository-names crm-$service 2>/dev/null || \
          aws ecr create-repository --repository-name crm-$service --region ${{ env.AWS_REGION }}
        done

    - name: Build and push Docker images
      run: |
        # Build and push all services
        services=("api-gateway" "auth" "leads" "email" "whatsapp" "landing-react" "backoffice-react")
        
        for service in "${services[@]}"; do
          echo "Building $service..."
          docker build -t $ECR_REGISTRY/crm-$service:$IMAGE_TAG ./services/$service
          docker push $ECR_REGISTRY/crm-$service:$IMAGE_TAG
          docker tag $ECR_REGISTRY/crm-$service:$IMAGE_TAG $ECR_REGISTRY/crm-$service:latest
          docker push $ECR_REGISTRY/crm-$service:latest
        done

    - name: Deploy infrastructure with Terraform
      working-directory: ./terraform
      run: |
        terraform init
        terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT
        terraform plan -var="environment=$ENVIRONMENT" -var="image_tag=$IMAGE_TAG"
        terraform apply -auto-approve -var="environment=$ENVIRONMENT" -var="image_tag=$IMAGE_TAG"

    - name: Update ECS services
      run: |
        # Only update services that exist in our current Terraform configuration
        services=("api-gateway" "auth" "leads")
        
        for service in "${services[@]}"; do
          if aws ecs describe-services --cluster $ECS_CLUSTER-$ENVIRONMENT --services $ECS_SERVICE_PREFIX-$service-$ENVIRONMENT >/dev/null 2>&1; then
            echo "Updating service: $service"
            aws ecs update-service \
              --cluster $ECS_CLUSTER-$ENVIRONMENT \
              --service $ECS_SERVICE_PREFIX-$service-$ENVIRONMENT \
              --force-new-deployment
          else
            echo "Service $service not found, skipping update..."
          fi
        done

    - name: Wait for deployment
      run: |
        services=("api-gateway" "auth" "leads")
        
        for service in "${services[@]}"; do
          if aws ecs describe-services --cluster $ECS_CLUSTER-$ENVIRONMENT --services $ECS_SERVICE_PREFIX-$service-$ENVIRONMENT >/dev/null 2>&1; then
            echo "Waiting for $service to be stable..."
            aws ecs wait services-stable \
              --cluster $ECS_CLUSTER-$ENVIRONMENT \
              --services $ECS_SERVICE_PREFIX-$service-$ENVIRONMENT
          else
            echo "Service $service not found, skipping..."
          fi
        done

    - name: Run database migrations
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        # Get infrastructure info from AWS
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=crm-vpc-$ENVIRONMENT" --query 'Vpcs[0].VpcId' --output text)
        PRIVATE_SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=crm-private-subnet-*-$ENVIRONMENT" --query 'Subnets[].SubnetId' --output text | tr '\t' ',')
        SECURITY_GROUP=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=crm-ecs-tasks-$ENVIRONMENT" --query 'SecurityGroups[0].GroupId' --output text)
        
        echo "Running migrations with subnets: $PRIVATE_SUBNETS and security group: $SECURITY_GROUP"
        
        # Use leads service to run migrations
        aws ecs run-task \
          --cluster $ECS_CLUSTER-$ENVIRONMENT \
          --task-definition crm-leads-$ENVIRONMENT \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$PRIVATE_SUBNETS],securityGroups=[$SECURITY_GROUP]}" \
          --overrides '{
            "containerOverrides": [{
              "name": "leads",
              "command": ["npm", "run", "migrate"]
            }]
          }'